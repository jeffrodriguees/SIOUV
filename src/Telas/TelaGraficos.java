/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Telas;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JRResultSetDataSource;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.view.JasperViewer;
import Conexao.DataBase;
import Conexao.DataBasePG;
import Metodos.NOcorrencias;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Image;
import static java.awt.PageAttributes.ColorType.COLOR;
import java.awt.Paint;
import java.awt.Toolkit;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.net.URL;
import javax.imageio.ImageIO;
import static jdk.nashorn.internal.runtime.GlobalFunctions.parseInt;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartUtilities;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.labels.StandardCategoryItemLabelGenerator;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.renderer.category.BarRenderer;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.general.DefaultPieDataset;
import org.jfree.data.general.PieDataset;

/**
 *
 * @author jefersonrodrigues
 */
public class TelaGraficos extends javax.swing.JFrame {

    Statement statementPG;
    DataBase db = new DataBase();
    DataBasePG db2 = new DataBasePG();
    Connection con;
    Connection con2;
    PreparedStatement PS, PS2;

    /**
     * Creates new form Relatorios
     */
    public TelaGraficos() throws SQLException, ClassNotFoundException, IOException {
        this.con2 = db2.getCon();
        initComponents();

        statementPG = con2.createStatement();
        relatorio();
//        URL caminhoIcone = getClass().getResource("/Imagens/logoIcone.png");
//        Image iconeTitulo = Toolkit.getDefaultToolkit().getImage(caminhoIcone);
//        this.setIconImage(iconeTitulo);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToggleButton1 = new javax.swing.JToggleButton();
        jLabel2 = new javax.swing.JLabel();
        painel = new javax.swing.JPanel();
        txt1 = new javax.swing.JTextField();
        txt1.setVisible(false);
        txt2 = new javax.swing.JTextField();
        txt2.setVisible(false);
        txt3 = new javax.swing.JTextField();
        txt3.setVisible(false);
        txt4 = new javax.swing.JTextField();
        txt4.setVisible(false);
        txt5 = new javax.swing.JTextField();
        txt5.setVisible(false);
        painel1 = new javax.swing.JPanel();
        painel2 = new javax.swing.JPanel();

        jToggleButton1.setText("jToggleButton1");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("RELATÓRIOS DE OCORRÊNCIAS - SIOUV");
        setBackground(new java.awt.Color(0, 0, 0));
        setResizable(false);

        jLabel2.setFont(new java.awt.Font("Arial", 0, 30)); // NOI18N
        jLabel2.setText("Relatórios de Ocorrências");

        painel.setBackground(new java.awt.Color(153, 153, 153));
        painel.setLayout(new java.awt.BorderLayout());

        txt1.setText("0");

        txt2.setText("0");

        txt3.setText("0");

        txt4.setText("0");

        txt5.setText("0");

        painel1.setBackground(new java.awt.Color(153, 153, 153));
        painel1.setLayout(new java.awt.BorderLayout());

        painel2.setBackground(new java.awt.Color(153, 153, 153));
        painel2.setLayout(new java.awt.BorderLayout());

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(painel, javax.swing.GroupLayout.PREFERRED_SIZE, 450, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(painel1, javax.swing.GroupLayout.PREFERRED_SIZE, 446, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(painel2, javax.swing.GroupLayout.PREFERRED_SIZE, 446, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(txt1, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txt2, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txt3, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txt4, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txt5, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(513, 513, 513)
                        .addComponent(jLabel2)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(painel, javax.swing.GroupLayout.DEFAULT_SIZE, 340, Short.MAX_VALUE)
                    .addComponent(painel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(painel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 90, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txt2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    public void rel_cat() throws SQLException, IOException {
        String interna = "select categoria, count(*) from OCORRENCIA_  where categoria = 'INTERNA' group by categoria";
        try (
                PreparedStatement ps = con2.prepareStatement(interna)) {
            ps.execute();
            ResultSet rs = ps.getResultSet();
            if (!rs.next()) {
            } else {
                txt1.setText(rs.getString(2));
            }
            rs.close();

        } catch (SQLException ex) {
            Logger.getLogger(TelaGraficos.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
        String externa = "select categoria, count(*) from OCORRENCIA_  where categoria = 'EXTERNA' group by categoria";
        try (
                PreparedStatement ps1 = con2.prepareStatement(externa)) {
            ps1.execute();
            ResultSet rs1 = ps1.getResultSet();
            if (!rs1.next()) {
            } else {
                txt2.setText(rs1.getString(2));
            }
            rs1.close();

        } catch (SQLException ex) {
            Logger.getLogger(TelaGraficos.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
        int s1 = Integer.parseInt(txt1.getText());
        int s2 = Integer.parseInt(txt2.getText());
        int s3 = Integer.parseInt(txt4.getText());
        int s4 = Integer.parseInt(txt5.getText());

        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        dataset.setValue(s1, "", "INTERNA");
        dataset.setValue(s2, "", "EXTERNA");
        dataset.setValue(s3, "", " ");
        dataset.setValue(s4, "", "  ");
        JFreeChart chart = ChartFactory.createBarChart3D("GRÁFICOS DE OCORRÊNCIAS SIOUV", "CATEGORIAS", "", dataset, PlotOrientation.VERTICAL, false, true, false);

        CategoryPlot catPlot = chart.getCategoryPlot();
        catPlot.setDomainGridlinePaint(Color.white);
        catPlot.setBackgroundPaint(Color.white);
        catPlot.setRangeGridlinePaint(Color.white);
        catPlot.setRangeGridlinePaint(Color.white);

        catPlot.setOutlineVisible(false);

        BarRenderer rend = (BarRenderer) catPlot.getRenderer();
        rend.setSeriesPaint(0, Color.GRAY); // azul aço
        rend.setSeriesPaint(1, Color.WHITE);// cinza Gray
        rend.setSeriesItemLabelsVisible(0, Boolean.TRUE, true);
        rend.setSeriesItemLabelsVisible(1, Boolean.TRUE, true);
        rend.setSeriesItemLabelsVisible(2, Boolean.TRUE, true);
        rend.setBaseItemLabelGenerator(new StandardCategoryItemLabelGenerator());
        rend.setDrawBarOutline(true);

        BufferedImage icon = ImageIO.read(new File("Imagens/logoGrafico.png"));
//            chart.setBackgroundImage(icon);
        CategoryPlot cattPlot = chart.getCategoryPlot();
        cattPlot.setBackgroundImage(icon);

//            try {
//                ChartUtilities.saveChartAsPNG(new File("image.png"), chart, 500, 400);
//            } catch (IOException e) {
//                System.out.println("Errr");
//            }
        ChartPanel chartPanel = new ChartPanel(chart);
        painel.removeAll();
        painel.add(chartPanel, BorderLayout.CENTER);
        painel.validate();
    }

    public void rel_ocor() throws SQLException, IOException {

        String denuncia = "select tipo_ocorrencia, count(*) from OCORRENCIA_  where tipo_ocorrencia = 'DENÚNCIA' group by tipo_ocorrencia";
        try (
                PreparedStatement ps1 = con2.prepareStatement(denuncia)) {
            ps1.execute();
            ResultSet rs1 = ps1.getResultSet();
            if (!rs1.next()) {
                txt1.setText("0");
            } else {
                txt1.setText(rs1.getString(2));
            }
            rs1.close();

        } catch (SQLException ex) {
            Logger.getLogger(TelaGraficos.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
        String elogio = "select tipo_ocorrencia, count(*) from OCORRENCIA_  where tipo_ocorrencia = 'ELOGIO' group by tipo_ocorrencia";
        try (
                PreparedStatement ps2 = con2.prepareStatement(elogio)) {
            ps2.execute();
            ResultSet rs2 = ps2.getResultSet();
            if (!rs2.next()) {
                txt2.setText("0");
            } else {
                txt2.setText(rs2.getString(2));
            }
            rs2.close();

        } catch (SQLException ex) {
            Logger.getLogger(TelaGraficos.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
        String improcedente = "select tipo_ocorrencia, count(*) from OCORRENCIA_  where tipo_ocorrencia = 'IMPROCEDENTE' group by tipo_ocorrencia";
        try (
                PreparedStatement ps3 = con2.prepareStatement(improcedente)) {
            ps3.execute();
            ResultSet rs3 = ps3.getResultSet();
            if (!rs3.next()) {
                txt3.setText("0");
            } else {
                txt3.setText(rs3.getString(2));
            }
            rs3.close();

        } catch (SQLException ex) {
            Logger.getLogger(TelaGraficos.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
        String reclamacao = "select tipo_ocorrencia, count(*) from OCORRENCIA_  where tipo_ocorrencia = 'RECLAMAÇÃO' group by tipo_ocorrencia";
        try (
                PreparedStatement ps4 = con2.prepareStatement(reclamacao)) {
            ps4.execute();
            ResultSet rs4 = ps4.getResultSet();
            if (!rs4.next()) {
                txt4.setText("0");
            } else {
                txt4.setText(rs4.getString(2));
            }
            rs4.close();

        } catch (SQLException ex) {
            Logger.getLogger(TelaGraficos.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
        String sugestao = "select tipo_ocorrencia, count(*) from OCORRENCIA_  where tipo_ocorrencia = 'SUGESTÃO' group by tipo_ocorrencia";
        try (
                PreparedStatement ps5 = con2.prepareStatement(sugestao)) {
            ps5.execute();
            ResultSet rs5 = ps5.getResultSet();
            if (!rs5.next()) {
                txt5.setText("0");
            } else {
                txt5.setText(rs5.getString(2));
            }
            rs5.close();

        } catch (SQLException ex) {
            Logger.getLogger(TelaGraficos.class
                    .getName()).log(Level.SEVERE, null, ex);
        }

        int s1 = Integer.parseInt(txt1.getText());
        int s2 = Integer.parseInt(txt2.getText());
        int s3 = Integer.parseInt(txt3.getText());
        int s4 = Integer.parseInt(txt4.getText());
        int s5 = Integer.parseInt(txt5.getText());

        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        dataset.setValue(s1, "", "DENÚNCIA");
        dataset.setValue(s2, "", "ELOGIO");
        dataset.setValue(s3, "", "IMPROCEDENTE");
        dataset.setValue(s4, "", "RECLAMAÇÃO");
        dataset.setValue(s5, "", "SUGESTÃO");

        JFreeChart chart = ChartFactory.createBarChart3D("GRÁFICOS DE OCORRÊNCIAS SIOUV", "TIPOS DE OCORRÊNCIAS", "", dataset, PlotOrientation.VERTICAL, false, true, false);

        CategoryPlot catPlot = chart.getCategoryPlot();
        catPlot.setDomainGridlinePaint(Color.white);
        catPlot.setBackgroundPaint(Color.white);
        catPlot.setRangeGridlinePaint(Color.white);
        catPlot.setRangeGridlinePaint(Color.white);
        catPlot.setOutlineVisible(false);

        BufferedImage icon = ImageIO.read(new File("Imagens/logoGrafico.png"));
//            chart.setBackgroundImage(icon);
        CategoryPlot cattPlot = chart.getCategoryPlot();
        cattPlot.setBackgroundImage(icon);

        BarRenderer rend = (BarRenderer) catPlot.getRenderer();
        rend.setItemMargin(-0.9);
        rend.setSeriesPaint(0, Color.GRAY); // azul aço
        rend.setSeriesPaint(1, Color.WHITE);// cinza Gray
        rend.setSeriesItemLabelsVisible(0, Boolean.TRUE, true);
        rend.setSeriesItemLabelsVisible(1, Boolean.TRUE, true);
        rend.setSeriesItemLabelsVisible(2, Boolean.TRUE, true);
        rend.setBaseItemLabelGenerator(new StandardCategoryItemLabelGenerator());
        rend.setDrawBarOutline(true);
        ChartPanel chartPanel = new ChartPanel(chart);
        painel1.removeAll();
        painel1.add(chartPanel, BorderLayout.CENTER);
        painel1.validate();
    }

    public void rel_sta() throws SQLException, IOException {

        String analise = "select status, count(*) from OCORRENCIA_  where status = 'EM ANÁLISE' group by status";
        try (
                PreparedStatement ps1 = con2.prepareStatement(analise)) {
            ps1.execute();
            ResultSet rs1 = ps1.getResultSet();
            if (!rs1.next()) {
                txt1.setText("0");
            } else {
                txt1.setText(rs1.getString(2));
            }
            rs1.close();

        } catch (SQLException ex) {
            Logger.getLogger(TelaGraficos.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
        String encerrado = "select status, count(*) from OCORRENCIA_  where status = 'ENCERRADO' group by status";
        try (
                PreparedStatement ps2 = con2.prepareStatement(encerrado)) {
            ps2.execute();
            ResultSet rs2 = ps2.getResultSet();
            if (!rs2.next()) {
                txt2.setText("0");
            } else {
                txt2.setText(rs2.getString(2));
            }
            rs2.close();

        } catch (SQLException ex) {
            Logger.getLogger(TelaGraficos.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
        String encaminhado = "select status, count(*) from OCORRENCIA_  where status = 'ENCAMINHADO' group by status";
        try (
                PreparedStatement ps3 = con2.prepareStatement(encaminhado)) {
            ps3.execute();
            ResultSet rs3 = ps3.getResultSet();
            if (!rs3.next()) {
                txt3.setText("0");
            } else {
                txt3.setText(rs3.getString(2));
            }
            rs3.close();

        } catch (SQLException ex) {
            Logger.getLogger(TelaGraficos.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
        String pendente = "select status, count(*) from OCORRENCIA_  where status = 'PENDENTE' group by status";
        try (
                PreparedStatement ps4 = con2.prepareStatement(pendente)) {
            ps4.execute();
            ResultSet rs4 = ps4.getResultSet();
            if (!rs4.next()) {
                txt4.setText("0");
            } else {
                txt4.setText(rs4.getString(2));
            }
            rs4.close();

        } catch (SQLException ex) {
            Logger.getLogger(TelaGraficos.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
        int s1 = Integer.parseInt(txt1.getText());
        int s2 = Integer.parseInt(txt2.getText());
        int s3 = Integer.parseInt(txt3.getText());
        int s4 = Integer.parseInt(txt4.getText());

        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        dataset.setValue(s1, "", "EM ANÁLISE");
        dataset.setValue(s2, "", "ENCERRADO");
        dataset.setValue(s3, "", "ENCAMINHADO");
        dataset.setValue(s4, "", "PENDENTE");

        JFreeChart chart = ChartFactory.createBarChart3D("GRÁFICOS DE OCORRÊNCIAS SIOUV", "STATUS", "", dataset, PlotOrientation.VERTICAL, false, true, false);
        CategoryPlot catPlot = chart.getCategoryPlot();
        catPlot.setDomainGridlinePaint(Color.white);
        catPlot.setBackgroundPaint(Color.white);
        catPlot.setRangeGridlinePaint(Color.white);
        catPlot.setRangeGridlinePaint(Color.white);
        catPlot.setOutlineVisible(false);

        BufferedImage icon = ImageIO.read(new File("Imagens/logoGrafico.png"));
//            chart.setBackgroundImage(icon);
        CategoryPlot cattPlot = chart.getCategoryPlot();
        cattPlot.setBackgroundImage(icon);

        BarRenderer rend = (BarRenderer) catPlot.getRenderer();
        rend.setSeriesPaint(0, Color.GRAY); // azul aço
        rend.setSeriesPaint(1, Color.WHITE);// cinza Gray
        rend.setSeriesItemLabelsVisible(0, Boolean.TRUE, true);
        rend.setSeriesItemLabelsVisible(1, Boolean.TRUE, true);
        rend.setSeriesItemLabelsVisible(2, Boolean.TRUE, true);
        rend.setBaseItemLabelGenerator(new StandardCategoryItemLabelGenerator());
        rend.setDrawBarOutline(true);
        ChartPanel chartPanel = new ChartPanel(chart);
        painel2.removeAll();
        painel2.add(chartPanel, BorderLayout.CENTER);
        painel2.validate();

    }

    void relatorio() throws SQLException, IOException {
        rel_cat();
        rel_ocor();
        rel_sta();
    }

//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(TelaRelatorios.class
//                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
//
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(TelaRelatorios.class
//                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
//
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(TelaRelatorios.class
//                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
//
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(TelaRelatorios.class
//                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                try {
//                    new TelaGraficos().setVisible(true);
//
//                } catch (SQLException ex) {
//                    Logger.getLogger(TelaGraficos.class
//                            .getName()).log(Level.SEVERE, null, ex);
//
//                } catch (ClassNotFoundException ex) {
//                    Logger.getLogger(TelaGraficos.class
//                            .getName()).log(Level.SEVERE, null, ex);
//                } catch (IOException ex) {
//                    Logger.getLogger(TelaGraficos.class.getName()).log(Level.SEVERE, null, ex);
//                }
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel2;
    private javax.swing.JToggleButton jToggleButton1;
    private javax.swing.JPanel painel;
    private javax.swing.JPanel painel1;
    private javax.swing.JPanel painel2;
    private javax.swing.JTextField txt1;
    private javax.swing.JTextField txt2;
    private javax.swing.JTextField txt3;
    private javax.swing.JTextField txt4;
    private javax.swing.JTextField txt5;
    // End of variables declaration//GEN-END:variables
}
