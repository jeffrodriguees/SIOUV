/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Telas;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JRResultSetDataSource;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.view.JasperViewer;
import Conexao.DataBase;
import Conexao.DataBasePG;
import Metodos.NOcorrencias;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Image;
import static java.awt.PageAttributes.ColorType.COLOR;
import java.awt.Paint;
import java.awt.Toolkit;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.net.URL;
import javax.imageio.ImageIO;
import static jdk.nashorn.internal.runtime.GlobalFunctions.parseInt;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartUtilities;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.labels.StandardCategoryItemLabelGenerator;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.renderer.category.BarRenderer;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.general.DefaultPieDataset;
import org.jfree.data.general.PieDataset;
import Telas.TelaGraficos;
import java.awt.Font;
import java.text.DecimalFormat;
import javafx.scene.chart.NumberAxis;
import org.jfree.chart.labels.ItemLabelAnchor;
import org.jfree.chart.labels.ItemLabelPosition;
import org.jfree.ui.TextAnchor;

/**
 *
 * @author jefersonrodrigues
 */
public class TelaRelatorios extends javax.swing.JFrame {

    Statement statementPG;
    DataBasePG db2 = new DataBasePG();
    Connection con;
    Connection con2;
    PreparedStatement PS, PS2;

    /**
     * Creates new form Relatorios
     */
    public TelaRelatorios() throws SQLException, ClassNotFoundException {
        this.con2 = db2.getCon();
        initComponents();
        statementPG = con2.createStatement();

//        URL caminhoIcone = getClass().getResource("/Imagens/logoIcone.png");
//        Image iconeTitulo = Toolkit.getDefaultToolkit().getImage(caminhoIcone);
//        this.setIconImage(iconeTitulo);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToggleButton1 = new javax.swing.JToggleButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        comboCategoria = new javax.swing.JComboBox<>();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel4 = new javax.swing.JLabel();
        comboOcorrencia = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        comboStatus = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        jSeparator3 = new javax.swing.JSeparator();
        dataCampo = new javax.swing.JTextField();
        try{
            javax.swing.text.MaskFormatter data= new javax.swing.text.MaskFormatter("##/##/####");
            dataCampo = new javax.swing.JFormattedTextField(data);
        }
        catch (Exception e){
        }
        dataCampo1 = new javax.swing.JTextField();
        try{
            javax.swing.text.MaskFormatter data= new javax.swing.text.MaskFormatter("##/##/####");
            dataCampo1 = new javax.swing.JFormattedTextField(data);
        }
        catch (Exception e){
        }
        jLabel1 = new javax.swing.JLabel();
        botaoVoltar = new javax.swing.JButton();
        checkCategoria = new javax.swing.JCheckBox();
        checkOcorrencia = new javax.swing.JCheckBox();
        checkStatus = new javax.swing.JCheckBox();
        botaoGerar = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        painel = new javax.swing.JPanel();
        txt1 = new javax.swing.JTextField();
        txt1.setVisible(false);
        txt2 = new javax.swing.JTextField();
        txt2.setVisible(false);
        txt3 = new javax.swing.JTextField();
        txt3.setVisible(false);
        txt4 = new javax.swing.JTextField();
        txt4.setVisible(false);
        txt5 = new javax.swing.JTextField();
        txt5.setVisible(false);
        txt6 = new javax.swing.JTextField();
        txt6.setVisible(false);

        jToggleButton1.setText("jToggleButton1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("RELATÓRIOS DE OCORRÊNCIAS - SIOUV");
        setResizable(false);

        jLabel2.setFont(new java.awt.Font("Arial", 0, 30)); // NOI18N
        jLabel2.setText("Relatórios de Ocorrências");

        jLabel3.setText("CATEGORIA");

        comboCategoria.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "", "INTERNA", "EXTERNA" }));
        comboCategoria.setEnabled(false);

        jLabel4.setText("TIPO DE OCORRENCIA");

        comboOcorrencia.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "", "DENÚNCIA", "ELOGIO", "IMPROCEDENTE", "RECLAMAÇÃO", "SUGESTÃO" }));
        comboOcorrencia.setEnabled(false);
        comboOcorrencia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboOcorrenciaActionPerformed(evt);
            }
        });

        jLabel5.setText("STATUS");

        comboStatus.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "", "EM ANÁLISE", "ENCERRADO", "ENCAMINHADO", "PENDENTE" }));
        comboStatus.setEnabled(false);
        comboStatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboStatusActionPerformed(evt);
            }
        });

        jLabel6.setText("DATA");

        jLabel1.setText("À");

        botaoVoltar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/voltar.png"))); // NOI18N
        botaoVoltar.setText("VOLTAR");
        botaoVoltar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoVoltarActionPerformed(evt);
            }
        });

        checkCategoria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkCategoriaActionPerformed(evt);
            }
        });

        checkOcorrencia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkOcorrenciaActionPerformed(evt);
            }
        });

        checkStatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkStatusActionPerformed(evt);
            }
        });

        botaoGerar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/relatorio.png"))); // NOI18N
        botaoGerar.setText("GERAR");
        botaoGerar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoGerarActionPerformed(evt);
            }
        });

        jLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/logovh.png"))); // NOI18N

        painel.setBackground(new java.awt.Color(153, 153, 153));
        painel.setLayout(new java.awt.BorderLayout());

        txt1.setText("0");

        txt2.setText("0");

        txt3.setText("0");

        txt4.setText("0");

        txt5.setText("0");

        txt6.setText("0");
        txt6.setEnabled(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(painel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(19, 19, 19)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(checkCategoria)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(comboCategoria, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(40, 40, 40)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(checkOcorrencia)
                                                .addGap(4, 4, 4)
                                                .addComponent(comboOcorrencia, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addComponent(jLabel4))
                                        .addGap(55, 55, 55)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(checkStatus)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(comboStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addComponent(jLabel5)))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 672, Short.MAX_VALUE)
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addComponent(jLabel2)
                                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                                    .addGap(18, 18, 18)
                                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                        .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addGroup(layout.createSequentialGroup()
                                                            .addComponent(dataCampo, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                            .addComponent(dataCampo1, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jLabel7))
                                        .addComponent(jSeparator3, javax.swing.GroupLayout.Alignment.LEADING))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(29, 29, 29)
                                .addComponent(txt1, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txt2, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txt3, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txt4, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txt5, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txt6, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(216, 216, 216)
                                .addComponent(botaoGerar)
                                .addGap(28, 28, 28)
                                .addComponent(botaoVoltar)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(dataCampo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(dataCampo1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1)))
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(comboCategoria, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(checkCategoria)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(checkOcorrencia)
                            .addComponent(comboOcorrencia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(32, 32, 32)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(comboStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(checkStatus)))))
                .addGap(4, 4, 4)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(botaoVoltar, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(botaoGerar, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(painel, javax.swing.GroupLayout.DEFAULT_SIZE, 349, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txt2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void comboOcorrenciaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboOcorrenciaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboOcorrenciaActionPerformed

    private void comboStatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboStatusActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboStatusActionPerformed

    private void botaoVoltarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoVoltarActionPerformed

        TelaInicial tela = null;
        try {
            tela = new TelaInicial();
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(TelaCadastroExt.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(TelaCadastroExt.class.getName()).log(Level.SEVERE, null, ex);
        }
        tela.setVisible(true);
        dispose();

    }//GEN-LAST:event_botaoVoltarActionPerformed

    private void checkCategoriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkCategoriaActionPerformed
        comboCategoria.setEnabled(true);
        if (!checkCategoria.isSelected()) {
            comboCategoria.setEnabled(false);
            comboCategoria.setSelectedIndex(0);
        }
    }//GEN-LAST:event_checkCategoriaActionPerformed

    private void checkOcorrenciaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkOcorrenciaActionPerformed
        comboOcorrencia.setEnabled(true);
        if (!checkOcorrencia.isSelected()) {
            comboOcorrencia.setEnabled(false);
            comboOcorrencia.setSelectedIndex(0);
        }
    }//GEN-LAST:event_checkOcorrenciaActionPerformed

    private void checkStatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkStatusActionPerformed
        comboStatus.setEnabled(true);
        if (!checkStatus.isSelected()) {
            comboStatus.setEnabled(false);
            comboStatus.setSelectedIndex(0);
        }
    }//GEN-LAST:event_checkStatusActionPerformed

    private void botaoGerarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoGerarActionPerformed
        try {
            relatorio();
        } catch (SQLException ex) {
            Logger.getLogger(TelaRelatorios.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(TelaRelatorios.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_botaoGerarActionPerformed

    public void rel_cat_ocor_sta() throws SQLException, IOException {
        if (comboCategoria.getSelectedIndex() == 0 && (comboOcorrencia.getSelectedIndex() == 0 && comboStatus.getSelectedIndex() == 0)) {

            TelaGraficos graficos = null;
            try {
                graficos = new TelaGraficos();
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(TelaGraficos.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(TelaGraficos.class.getName()).log(Level.SEVERE, null, ex);
            }
            graficos.setVisible(true);

        } else if (comboCategoria.getSelectedIndex() != 0 && (comboOcorrencia.getSelectedIndex() != 0) && (comboStatus.getSelectedIndex() != 0)) {
            PS = con2.prepareStatement("SELECT * FROM OCORRENCIA_ WHERE categoria = '" + comboCategoria.getSelectedItem() + "' "
                    + "AND tipo_ocorrencia = '" + comboOcorrencia.getSelectedItem() + "' "
                    + "AND status = '" + comboStatus.getSelectedItem() + "' "
                    + "AND data BETWEEN '" + dataCampo.getText().substring(6, 10) + "-" + dataCampo.getText().substring(3, 5) + "-" + dataCampo.getText().substring(0, 2) + "' AND '"
                    + dataCampo1.getText().substring(6, 10) + "-" + dataCampo1.getText().substring(3, 5) + "-" + dataCampo1.getText().substring(0, 2) + "'  ORDER BY data");
            ResultSet rs = PS.executeQuery();

            if (rs.isBeforeFirst()) {
                JRResultSetDataSource teste = new JRResultSetDataSource(rs);
                String src = "relatorioSiouv.jasper";

                JasperPrint jaspertPrint = null;
                try {
                    jaspertPrint = JasperFillManager.fillReport(src, new HashMap(), teste);
                } catch (JRException ex) {
                    Logger.getLogger(TelaInicial.class.getName()).log(Level.SEVERE, null, ex);
                }

                JasperViewer view = new JasperViewer(jaspertPrint, false);

                view.setVisible(true);
            } else {
                JOptionPane.showMessageDialog(null, "Não Possui Registro Conforme Busca, Digite uma DATA válida.", "Erro", JOptionPane.ERROR_MESSAGE);
            }

        } else if (comboCategoria.getSelectedIndex() != 0 && (comboOcorrencia.getSelectedIndex() == 0 && comboStatus.getSelectedIndex() == 0)) {
            rel_cat();
        } else if (comboCategoria.getSelectedIndex() == 0 && (comboOcorrencia.getSelectedIndex() != 0 && comboStatus.getSelectedIndex() == 0)) {
            rel_ocor();
        } else if (comboCategoria.getSelectedIndex() == 0 && (comboOcorrencia.getSelectedIndex() == 0 && comboStatus.getSelectedIndex() != 0)) {
            rel_sta();
        }
    }

    public void rel_cat_ocor() throws SQLException, IOException {
        if (comboCategoria.getSelectedIndex() == 0 && (comboOcorrencia.getSelectedIndex() == 0)) {
            rel_data();
        } else if (comboCategoria.getSelectedIndex() != 0 && (comboOcorrencia.getSelectedIndex() != 0)) {
            PS = con2.prepareStatement("SELECT * FROM OCORRENCIA_ WHERE categoria = '" + comboCategoria.getSelectedItem() + "' and "
                    + "tipo_ocorrencia = '" + comboOcorrencia.getSelectedItem() + "' "
                    + "AND data BETWEEN '" + dataCampo.getText().substring(6, 10) + "-" + dataCampo.getText().substring(3, 5) + "-" + dataCampo.getText().substring(0, 2) + "' AND '"
                    + dataCampo1.getText().substring(6, 10) + "-" + dataCampo1.getText().substring(3, 5) + "-" + dataCampo1.getText().substring(0, 2) + "'  ORDER BY data");
            ResultSet rs = PS.executeQuery();

            if (rs.isBeforeFirst()) {
                JRResultSetDataSource teste = new JRResultSetDataSource(rs);
                String src = "relatorioSiouv.jasper";

                JasperPrint jaspertPrint = null;
                try {
                    jaspertPrint = JasperFillManager.fillReport(src, new HashMap(), teste);
                } catch (JRException ex) {
                    Logger.getLogger(TelaInicial.class.getName()).log(Level.SEVERE, null, ex);
                }

                JasperViewer view = new JasperViewer(jaspertPrint, false);

                view.setVisible(true);
            } else {
                JOptionPane.showMessageDialog(null, "Não Possui Relatórios com a data informada!", "Erro", JOptionPane.ERROR_MESSAGE);
            }
            String denuncia = "select tipo_ocorrencia, count(*) from SIOUV.OCORRENCIA_  where categoria = '" + comboCategoria.getSelectedItem() + "' AND tipo_ocorrencia = '" + comboOcorrencia.getSelectedItem() + "' group by tipo_ocorrencia";
            PreparedStatement ps4 = con2.prepareStatement(denuncia);
            ps4.execute();
            ResultSet rs4 = ps4.getResultSet();
            if (!rs4.next()) {
                txt1.setText("0");
            } else {
                txt1.setText(rs4.getString(2));
            }
            rs4.close();

            String denuncia2 = "select tipo_ocorrencia, count(*) from SIOUV.OCORRENCIA_  where categoria = '" + comboCategoria.getSelectedItem() + "' AND tipo_ocorrencia = '" + comboOcorrencia.getSelectedItem() + "' AND STATUS = 'EM ANÁLISE' group by tipo_ocorrencia";
            PreparedStatement psr2 = con2.prepareStatement(denuncia2);
            psr2.execute();
            ResultSet rsr2 = psr2.getResultSet();
            if (!rsr2.next()) {
                txt2.setText("0");
            } else {
                txt2.setText(rsr2.getString(2));
            }
            rsr2.close();

            String denuncia3 = "select tipo_ocorrencia, count(*) from SIOUV.OCORRENCIA_  where categoria = '" + comboCategoria.getSelectedItem() + "' AND tipo_ocorrencia = '" + comboOcorrencia.getSelectedItem() + "' AND STATUS = 'ENCERRADO' group by tipo_ocorrencia";
            PreparedStatement psr3 = con2.prepareStatement(denuncia3);
            psr3.execute();
            ResultSet rsr3 = psr3.getResultSet();
            if (!rsr3.next()) {
                txt3.setText("0");
            } else {
                txt3.setText(rsr3.getString(2));
            }
            rsr3.close();

            String denuncia4 = "select tipo_ocorrencia, count(*) from SIOUV.OCORRENCIA_  where categoria = '" + comboCategoria.getSelectedItem() + "' AND tipo_ocorrencia = '" + comboOcorrencia.getSelectedItem() + "' AND STATUS = 'ENCAMINHADO' group by tipo_ocorrencia";
            PreparedStatement psr4 = con2.prepareStatement(denuncia4);
            psr4.execute();
            ResultSet rsr4 = psr4.getResultSet();
            if (!rsr4.next()) {
                txt4.setText("0");
            } else {
                txt4.setText(rsr4.getString(2));
            }
            rsr4.close();

            String denuncia5 = "select tipo_ocorrencia, count(*) from SIOUV.OCORRENCIA_  where categoria = '" + comboCategoria.getSelectedItem() + "' AND tipo_ocorrencia = '" + comboOcorrencia.getSelectedItem() + "' AND STATUS = 'PENDENTE' group by tipo_ocorrencia";
            PreparedStatement psr5 = con2.prepareStatement(denuncia5);
            psr5.execute();
            ResultSet rsr5 = psr5.getResultSet();
            if (!rsr5.next()) {
                txt5.setText("0");
            } else {
                txt5.setText(rsr5.getString(2));
            }
            rsr5.close();

            int s1 = Integer.parseInt(txt1.getText());
            int s2 = Integer.parseInt(txt2.getText());
            int s3 = Integer.parseInt(txt3.getText());
            int s4 = Integer.parseInt(txt4.getText());
            int s5 = Integer.parseInt(txt5.getText());

            DefaultCategoryDataset dataset = new DefaultCategoryDataset();
            dataset.setValue(s1, "TIPO1", (Comparable) comboOcorrencia.getSelectedItem());
            dataset.setValue(s2, "TIPO2", "EM ANÁLISE");
            dataset.setValue(s3, "TIPO2", "ENCERRADO");
            dataset.setValue(s4, "TIPO2", "ENCAMINHADO");
            dataset.setValue(s5, "TIPO2", "PENDENTE");

            JFreeChart chart = ChartFactory.createBarChart3D("GRÁFICOS DE OCORRÊNCIAS SIOUV", "OCORRÊNCIAS - "+ comboCategoria.getSelectedItem() + " - "+ comboOcorrencia.getSelectedItem(), "", dataset, PlotOrientation.VERTICAL, false, false, false);

            CategoryPlot catPlot = chart.getCategoryPlot();
            catPlot.setDomainGridlinePaint(Color.white);
            catPlot.setBackgroundPaint(Color.white);
            catPlot.setRangeGridlinePaint(Color.white);
            catPlot.setRangeGridlinePaint(Color.white);
            catPlot.setOutlineVisible(false);

            BufferedImage icon = ImageIO.read(new File("Imagens/logoGrafico.png"));
//            chart.setBackgroundImage(icon);

            CategoryPlot cattPlot = chart.getCategoryPlot();
            cattPlot.setBackgroundImage(icon);

            BarRenderer rend = (BarRenderer) catPlot.getRenderer();
            ItemLabelPosition p = new ItemLabelPosition(ItemLabelAnchor.CENTER, TextAnchor.CENTER);
            rend.setItemMargin(-0.9);
            rend.setSeriesPaint(0, Color.GRAY); // azul aço
            rend.setSeriesPaint(1, Color.WHITE);// cinza Gray
            rend.setSeriesItemLabelsVisible(0, Boolean.TRUE, false);
            rend.setSeriesItemLabelsVisible(1, Boolean.TRUE, false);
            rend.setSeriesItemLabelsVisible(2, Boolean.TRUE, false);
            rend.setBaseItemLabelFont(new Font("SansSerif", Font.BOLD, 12));
            rend.setBaseItemLabelGenerator(new StandardCategoryItemLabelGenerator());
            rend.setBaseItemLabelsVisible(true);
            rend.setBasePositiveItemLabelPosition(p);
            rend.setPositiveItemLabelPositionFallback(p);
            rend.setDrawBarOutline(true);
            
            ChartPanel chartPanel = new ChartPanel(chart);

            painel.removeAll();
            painel.add(chartPanel, BorderLayout.CENTER);
            painel.validate();
            
        } else if (comboCategoria.getSelectedIndex() != 0 && (comboOcorrencia.getSelectedIndex() == 0)) {
            rel_cat();
        } else if (comboCategoria.getSelectedIndex() == 0 && (comboOcorrencia.getSelectedIndex() != 0)) {
            rel_ocor();
        }

    }

    public void rel_cat_sta() throws SQLException, IOException {
        if (comboCategoria.getSelectedIndex() == 0 && comboStatus.getSelectedIndex() == 0) {
            rel_data();
        } else if (comboCategoria.getSelectedIndex() != 0 && comboStatus.getSelectedIndex() != 0) {
            PS = con2.prepareStatement("SELECT * FROM OCORRENCIA_ WHERE categoria = '" + comboCategoria.getSelectedItem() + "' and "
                    + "status = '" + comboStatus.getSelectedItem() + "' "
                    + "AND data BETWEEN '" + dataCampo.getText().substring(6, 10) + "-" + dataCampo.getText().substring(3, 5) + "-" + dataCampo.getText().substring(0, 2) + "' AND '"
                    + dataCampo1.getText().substring(6, 10) + "-" + dataCampo1.getText().substring(3, 5) + "-" + dataCampo1.getText().substring(0, 2) + "'  ORDER BY data");
            ResultSet rs = PS.executeQuery();

            if (rs.isBeforeFirst()) {
                JRResultSetDataSource teste = new JRResultSetDataSource(rs);
                String src = "relatorioSiouv.jasper";

                JasperPrint jaspertPrint = null;
                try {
                    jaspertPrint = JasperFillManager.fillReport(src, new HashMap(), teste);
                } catch (JRException ex) {
                    Logger.getLogger(TelaInicial.class.getName()).log(Level.SEVERE, null, ex);
                }

                JasperViewer view = new JasperViewer(jaspertPrint, false);

                view.setVisible(true);
            } else {
                JOptionPane.showMessageDialog(null, "Não Possui Registro Conforme Busca!", "Erro", JOptionPane.ERROR_MESSAGE);
            }
        } else if (comboCategoria.getSelectedIndex() != 0 && comboStatus.getSelectedIndex() == 0) {
            rel_cat();
        } else if (comboCategoria.getSelectedIndex() == 0 && comboStatus.getSelectedIndex() != 0) {
            rel_sta();
        }
    }

    public void rel_ocor_sta() throws SQLException, IOException {
        if (comboOcorrencia.getSelectedIndex() == 0 && comboStatus.getSelectedIndex() == 0) {
            rel_data();
        } else if (comboOcorrencia.getSelectedIndex() != 0 && comboStatus.getSelectedIndex() != 0) {
            PS = con2.prepareStatement("SELECT * FROM OCORRENCIA_ WHERE TIPO_OCORRENCIA = '" + comboOcorrencia.getSelectedItem() + "' and "
                    + "STATUS = '" + comboStatus.getSelectedItem() + "' "
                    + "AND DATA BETWEEN '" + dataCampo.getText().substring(6, 10) + "-" + dataCampo.getText().substring(3, 5) + "-" + dataCampo.getText().substring(0, 2) + "' AND '"
                    + dataCampo1.getText().substring(6, 10) + "-" + dataCampo1.getText().substring(3, 5) + "-" + dataCampo1.getText().substring(0, 2) + "'  ORDER BY data");
            ResultSet rs = PS.executeQuery();

            if (rs.isBeforeFirst()) {
                JRResultSetDataSource teste = new JRResultSetDataSource(rs);
                String src = "relatorioSiouv.jasper";

                JasperPrint jaspertPrint = null;
                try {
                    jaspertPrint = JasperFillManager.fillReport(src, new HashMap(), teste);
                } catch (JRException ex) {
                    Logger.getLogger(TelaInicial.class.getName()).log(Level.SEVERE, null, ex);
                }

                JasperViewer view = new JasperViewer(jaspertPrint, false);

                view.setVisible(true);
            } else {
                JOptionPane.showMessageDialog(null, "Não Possui Registro Conforme Busca!", "Erro", JOptionPane.ERROR_MESSAGE);
            }
        } else if (comboOcorrencia.getSelectedIndex() != 0 && comboStatus.getSelectedIndex() == 0) {
            rel_ocor();
        } else if (comboOcorrencia.getSelectedIndex() == 0 && comboStatus.getSelectedIndex() != 0) {
            rel_sta();
        }
    }

    public void rel_cat() throws SQLException, IOException {
        if (comboCategoria.getSelectedIndex() == 0) {
            String categoria = "select categoria, count(*) from OCORRENCIA_  where categoria = 'INTERNA' group by categoria";
            try (
                    PreparedStatement ps = con2.prepareStatement(categoria)) {
                ps.execute();
                ResultSet rs = ps.getResultSet();
                if (!rs.next()) {
                } else {
                    txt1.setText(rs.getString(2));
                }
                rs.close();

            } catch (SQLException ex) {
                Logger.getLogger(TelaRelatorios.class
                        .getName()).log(Level.SEVERE, null, ex);
            }
            String externa = "select categoria, count(*) from OCORRENCIA_  where categoria = 'EXTERNA' group by categoria";
            try (
                    PreparedStatement ps1 = con2.prepareStatement(externa)) {
                ps1.execute();
                ResultSet rs1 = ps1.getResultSet();
                if (!rs1.next()) {
                } else {
                    txt2.setText(rs1.getString(2));
                }
                rs1.close();

            } catch (SQLException ex) {
                Logger.getLogger(TelaRelatorios.class
                        .getName()).log(Level.SEVERE, null, ex);
            }
            int s1 = Integer.parseInt(txt1.getText());
            int s2 = Integer.parseInt(txt2.getText());
            int s3 = Integer.parseInt(txt4.getText());
            int s4 = Integer.parseInt(txt5.getText());

            DefaultCategoryDataset dataset = new DefaultCategoryDataset();
            dataset.setValue(s1, "", "INTERNA");
            dataset.setValue(s2, "", "EXTERNA");
            dataset.setValue(s3, "", " ");
            dataset.setValue(s4, "", "  ");
            JFreeChart chart = ChartFactory.createBarChart3D("GRÁFICOS DE OCORRÊNCIAS SIOUV", "CATEGORIAS", "", dataset, PlotOrientation.VERTICAL, false, true, false);

            CategoryPlot catPlot = chart.getCategoryPlot();
            catPlot.setDomainGridlinePaint(Color.white);
            catPlot.setBackgroundPaint(Color.white);
            catPlot.setRangeGridlinePaint(Color.white);
            catPlot.setRangeGridlinePaint(Color.white);

            catPlot.setOutlineVisible(false);

            BarRenderer rend = (BarRenderer) catPlot.getRenderer();
            ItemLabelPosition p = new ItemLabelPosition(ItemLabelAnchor.CENTER, TextAnchor.CENTER);
            rend.setItemMargin(-0.9);
            rend.setSeriesPaint(0, Color.GRAY); // azul aço
            rend.setSeriesPaint(1, Color.WHITE);// cinza Gray
            rend.setSeriesItemLabelsVisible(0, Boolean.TRUE, false);
            rend.setSeriesItemLabelsVisible(1, Boolean.TRUE, false);
            rend.setSeriesItemLabelsVisible(2, Boolean.TRUE, false);
            rend.setBaseItemLabelFont(new Font("SansSerif", Font.BOLD, 12));
            rend.setBaseItemLabelGenerator(new StandardCategoryItemLabelGenerator());
            rend.setBaseItemLabelsVisible(true);
            rend.setBasePositiveItemLabelPosition(p);
            rend.setPositiveItemLabelPositionFallback(p);
            rend.setDrawBarOutline(true);

            BufferedImage icon = ImageIO.read(new File("Imagens/logoGrafico.png"));
//            chart.setBackgroundImage(icon);
            CategoryPlot cattPlot = chart.getCategoryPlot();
            cattPlot.setBackgroundImage(icon);

//            try {
            //                ChartUtilities.saveChartAsPNG(new File("image.png"), chart, 500, 400);
            //            } catch (IOException e) {
            //                System.out.println("Errr");
            //            }
            ChartPanel chartPanel = new ChartPanel(chart);
            painel.removeAll();
            painel.add(chartPanel, BorderLayout.CENTER);
            painel.validate();
        } else if (comboCategoria.getSelectedIndex() == 1) {
            String interna = "select categoria, count(*) from SIOUV.OCORRENCIA_  where categoria = 'interna' group by categoria";
            PreparedStatement ps = con2.prepareStatement(interna);
            ps.execute();
            ResultSet rs = ps.getResultSet();
            if (!rs.next()) {
                txt6.setText("0");
            } else {
                txt6.setText(rs.getString(2));
            }
            rs.close();

            String geral = "select tipo_ocorrencia, count(*) from OCORRENCIA_  where CATEGORIA = 'INTERNA' AND tipo_ocorrencia = 'DENÚNCIA' group by tipo_ocorrencia";
            try (
                    PreparedStatement ps1 = con2.prepareStatement(geral)) {
                ps1.execute();
                ResultSet rs1 = ps1.getResultSet();
                if (!rs1.next()) {
                    txt1.setText("0");
                } else {
                    txt1.setText(rs1.getString(2));
                }
                rs1.close();

            } catch (SQLException ex) {
                Logger.getLogger(TelaRelatorios.class
                        .getName()).log(Level.SEVERE, null, ex);
            }
            String geral1 = "select tipo_ocorrencia, count(*) from OCORRENCIA_  where CATEGORIA = 'INTERNA' AND tipo_ocorrencia = 'ELOGIO' group by tipo_ocorrencia";
            try (
                    PreparedStatement ps2 = con2.prepareStatement(geral1)) {
                ps2.execute();
                ResultSet rs2 = ps2.getResultSet();
                if (!rs2.next()) {
                    txt2.setText("0");
                } else {
                    txt2.setText(rs2.getString(2));
                }
                rs2.close();

            } catch (SQLException ex) {
                Logger.getLogger(TelaRelatorios.class
                        .getName()).log(Level.SEVERE, null, ex);
            }
            String geral2 = "select tipo_ocorrencia, count(*) from OCORRENCIA_  where CATEGORIA = 'INTERNA' AND tipo_ocorrencia = 'IMPROCEDENTE' group by tipo_ocorrencia";
            try (
                    PreparedStatement ps3 = con2.prepareStatement(geral2)) {
                ps3.execute();
                ResultSet rs3 = ps3.getResultSet();
                if (!rs3.next()) {
                    txt3.setText("0");
                } else {
                    txt3.setText(rs3.getString(2));
                }
                rs3.close();

            } catch (SQLException ex) {
                Logger.getLogger(TelaRelatorios.class
                        .getName()).log(Level.SEVERE, null, ex);
            }
            String geral3 = "select tipo_ocorrencia, count(*) from OCORRENCIA_  where CATEGORIA = 'INTERNA' AND tipo_ocorrencia = 'RECLAMAÇÃO' group by tipo_ocorrencia";
            try (
                    PreparedStatement ps4 = con2.prepareStatement(geral3)) {
                ps4.execute();
                ResultSet rs4 = ps4.getResultSet();
                if (!rs4.next()) {
                    txt4.setText("0");
                } else {
                    txt4.setText(rs4.getString(2));
                }
                rs4.close();

            } catch (SQLException ex) {
                Logger.getLogger(TelaRelatorios.class
                        .getName()).log(Level.SEVERE, null, ex);
            }
            String geral4 = "select tipo_ocorrencia, count(*) from OCORRENCIA_  where CATEGORIA = 'INTERNA' AND TIPO_OCORRENCIA = 'SUGESTÃO' group by TIPO_OCORRENCIA";
            try (
                    PreparedStatement ps5 = con2.prepareStatement(geral4)) {
                ps5.execute();
                ResultSet rs5 = ps5.getResultSet();
                if (!rs5.next()) {
                    txt5.setText("0");
                } else {
                    txt5.setText(rs5.getString(2));
                }
                rs5.close();

            } catch (SQLException ex) {
                Logger.getLogger(TelaRelatorios.class
                        .getName()).log(Level.SEVERE, null, ex);
            }

            int s1 = Integer.parseInt(txt1.getText());
            int s2 = Integer.parseInt(txt2.getText());
            int s3 = Integer.parseInt(txt3.getText());
            int s4 = Integer.parseInt(txt4.getText());
            int s5 = Integer.parseInt(txt5.getText());
            int s6 = Integer.parseInt(txt6.getText());

            DefaultCategoryDataset dataset = new DefaultCategoryDataset();
            dataset.setValue(s6, "TIPO1", (Comparable) comboCategoria.getSelectedItem());
            dataset.setValue(s1, "TIPO2", "DENÚNCIA");
            dataset.setValue(s2, "TIPO2", "ELOGIO");
            dataset.setValue(s3, "TIPO2", "IMPROCEDENTE");
            dataset.setValue(s4, "TIPO2", "RECLAMAÇÃO");
            dataset.setValue(s5, "TIPO2", "SUGESTÃO");

            JFreeChart chart = ChartFactory.createBarChart3D("GRÁFICOS DE OCORRÊNCIAS SIOUV", "TIPOS DE OCORRÊNCIAS - " + comboCategoria.getSelectedItem(), "", dataset, PlotOrientation.VERTICAL, false, false, false);

            CategoryPlot catPlot = chart.getCategoryPlot();
            catPlot.setDomainGridlinePaint(Color.white);
            catPlot.setBackgroundPaint(Color.white);
            catPlot.setRangeGridlinePaint(Color.white);
            catPlot.setRangeGridlinePaint(Color.white);
            catPlot.setOutlineVisible(false);

            BufferedImage icon = ImageIO.read(new File("Imagens/logoGrafico.png"));
//            chart.setBackgroundImage(icon);

            CategoryPlot cattPlot = chart.getCategoryPlot();
            cattPlot.setBackgroundImage(icon);

            BarRenderer rend = (BarRenderer) catPlot.getRenderer();
            ItemLabelPosition p = new ItemLabelPosition(ItemLabelAnchor.CENTER, TextAnchor.CENTER);
            rend.setItemMargin(-0.9);
            rend.setSeriesPaint(0, Color.GRAY); // azul aço
            rend.setSeriesPaint(1, Color.WHITE);// cinza Gray
            rend.setSeriesItemLabelsVisible(0, Boolean.TRUE, false);
            rend.setSeriesItemLabelsVisible(1, Boolean.TRUE, false);
            rend.setSeriesItemLabelsVisible(2, Boolean.TRUE, false);
            rend.setBaseItemLabelFont(new Font("SansSerif", Font.BOLD, 12));
            rend.setBaseItemLabelGenerator(new StandardCategoryItemLabelGenerator());
            rend.setBaseItemLabelsVisible(true);
            rend.setBasePositiveItemLabelPosition(p);
            rend.setPositiveItemLabelPositionFallback(p);
            rend.setDrawBarOutline(true);
            
            ChartPanel chartPanel = new ChartPanel(chart);

            painel.removeAll();
            painel.add(chartPanel, BorderLayout.CENTER);
            painel.validate();
        } else if (comboCategoria.getSelectedIndex() == 2) {
            String externa = "select categoria, count(*) from SIOUV.OCORRENCIA_  where categoria = 'externa' group by categoria";
            PreparedStatement ps = con2.prepareStatement(externa);
            ps.execute();
            ResultSet rs = ps.getResultSet();
            if (!rs.next()) {
                txt6.setText("0");
            } else {
                txt6.setText(rs.getString(2));
            }
            rs.close();

            String geral = "select tipo_ocorrencia, count(*) from OCORRENCIA_  where CATEGORIA = 'externa' AND tipo_ocorrencia = 'DENÚNCIA' group by tipo_ocorrencia";
            try (
                    PreparedStatement ps1 = con2.prepareStatement(geral)) {
                ps1.execute();
                ResultSet rs1 = ps1.getResultSet();
                if (!rs1.next()) {
                    txt1.setText("0");
                } else {
                    txt1.setText(rs1.getString(2));
                }
                rs1.close();

            } catch (SQLException ex) {
                Logger.getLogger(TelaRelatorios.class
                        .getName()).log(Level.SEVERE, null, ex);
            }
            String geral1 = "select tipo_ocorrencia, count(*) from OCORRENCIA_  where CATEGORIA = 'externa' AND tipo_ocorrencia = 'ELOGIO' group by tipo_ocorrencia";
            try (
                    PreparedStatement ps2 = con2.prepareStatement(geral1)) {
                ps2.execute();
                ResultSet rs2 = ps2.getResultSet();
                if (!rs2.next()) {
                    txt2.setText("0");
                } else {
                    txt2.setText(rs2.getString(2));
                }
                rs2.close();

            } catch (SQLException ex) {
                Logger.getLogger(TelaRelatorios.class
                        .getName()).log(Level.SEVERE, null, ex);
            }
            String geral2 = "select tipo_ocorrencia, count(*) from OCORRENCIA_  where CATEGORIA = 'externa' AND tipo_ocorrencia = 'IMPROCEDENTE' group by tipo_ocorrencia";
            try (
                    PreparedStatement ps3 = con2.prepareStatement(geral2)) {
                ps3.execute();
                ResultSet rs3 = ps3.getResultSet();
                if (!rs3.next()) {
                    txt3.setText("0");
                } else {
                    txt3.setText(rs3.getString(2));
                }
                rs3.close();

            } catch (SQLException ex) {
                Logger.getLogger(TelaRelatorios.class
                        .getName()).log(Level.SEVERE, null, ex);
            }
            String geral3 = "select tipo_ocorrencia, count(*) from OCORRENCIA_  where CATEGORIA = 'externa' AND tipo_ocorrencia = 'RECLAMAÇÃO' group by tipo_ocorrencia";
            try (
                    PreparedStatement ps4 = con2.prepareStatement(geral3)) {
                ps4.execute();
                ResultSet rs4 = ps4.getResultSet();
                if (!rs4.next()) {
                    txt4.setText("0");
                } else {
                    txt4.setText(rs4.getString(2));
                }
                rs4.close();

            } catch (SQLException ex) {
                Logger.getLogger(TelaRelatorios.class
                        .getName()).log(Level.SEVERE, null, ex);
            }
            String geral4 = "select tipo_ocorrencia, count(*) from OCORRENCIA_  where CATEGORIA = 'externa' AND TIPO_OCORRENCIA = 'SUGESTÃO' group by TIPO_OCORRENCIA";
            try (
                    PreparedStatement ps5 = con2.prepareStatement(geral4)) {
                ps5.execute();
                ResultSet rs5 = ps5.getResultSet();
                if (!rs5.next()) {
                    txt5.setText("0");
                } else {
                    txt5.setText(rs5.getString(2));
                }
                rs5.close();

            } catch (SQLException ex) {
                Logger.getLogger(TelaRelatorios.class
                        .getName()).log(Level.SEVERE, null, ex);
            }

            int s1 = Integer.parseInt(txt1.getText());
            int s2 = Integer.parseInt(txt2.getText());
            int s3 = Integer.parseInt(txt3.getText());
            int s4 = Integer.parseInt(txt4.getText());
            int s5 = Integer.parseInt(txt5.getText());
            int s6 = Integer.parseInt(txt6.getText());

            DefaultCategoryDataset dataset = new DefaultCategoryDataset();
            dataset.setValue(s6, "TIPO1", (Comparable) comboCategoria.getSelectedItem());
            dataset.setValue(s1, "TIPO2", "DENÚNCIA");
            dataset.setValue(s2, "TIPO2", "ELOGIO");
            dataset.setValue(s3, "TIPO2", "IMPROCEDENTE");
            dataset.setValue(s4, "TIPO2", "RECLAMAÇÃO");
            dataset.setValue(s5, "TIPO2", "SUGESTÃO");

            JFreeChart chart = ChartFactory.createBarChart3D("GRÁFICOS DE OCORRÊNCIAS SIOUV", "TIPOS DE OCORRÊNCIAS - " + comboCategoria.getSelectedItem(), "", dataset, PlotOrientation.VERTICAL, false, false, false);

            CategoryPlot catPlot = chart.getCategoryPlot();
            catPlot.setDomainGridlinePaint(Color.white);
            catPlot.setBackgroundPaint(Color.white);
            catPlot.setRangeGridlinePaint(Color.white);
            catPlot.setRangeGridlinePaint(Color.white);
            catPlot.setOutlineVisible(false);

            BufferedImage icon = ImageIO.read(new File("Imagens/logoGrafico.png"));
//            chart.setBackgroundImage(icon);

            CategoryPlot cattPlot = chart.getCategoryPlot();
            cattPlot.setBackgroundImage(icon);

            BarRenderer rend = (BarRenderer) catPlot.getRenderer();
            ItemLabelPosition p = new ItemLabelPosition(ItemLabelAnchor.CENTER, TextAnchor.CENTER);
            rend.setItemMargin(-0.9);
            rend.setSeriesPaint(0, Color.GRAY); // azul aço
            rend.setSeriesPaint(1, Color.WHITE);// cinza Gray
            rend.setSeriesItemLabelsVisible(0, Boolean.TRUE, false);
            rend.setSeriesItemLabelsVisible(1, Boolean.TRUE, false);
            rend.setSeriesItemLabelsVisible(2, Boolean.TRUE, false);
            rend.setBaseItemLabelFont(new Font("SansSerif", Font.BOLD, 12));
            rend.setBaseItemLabelGenerator(new StandardCategoryItemLabelGenerator());
            rend.setBaseItemLabelsVisible(true);
            rend.setBasePositiveItemLabelPosition(p);
            rend.setPositiveItemLabelPositionFallback(p);
            rend.setDrawBarOutline(true);

         
            ChartPanel chartPanel = new ChartPanel(chart);

            painel.removeAll();
            painel.add(chartPanel, BorderLayout.CENTER);
            painel.validate();
        }
//        else if (comboCategoria.getSelectedIndex() != 0) {
//            PS = con2.prepareStatement("SELECT * FROM OCORRENCIA_ WHERE CATEGORIA = '" + comboCategoria.getSelectedItem()
//                    + "' AND DATA BETWEEN '" + dataCampo.getText().substring(6, 10) + "-" + dataCampo.getText().substring(3, 5) + "-" + dataCampo.getText().substring(0, 2) + "' AND '"
//                    + dataCampo1.getText().substring(6, 10) + "-" + dataCampo1.getText().substring(3, 5) + "-" + dataCampo1.getText().substring(0, 2) + "'  ORDER BY data");
//            ResultSet rs = PS.executeQuery();
//
//            if (rs.isBeforeFirst()) {
//                JRResultSetDataSource teste = new JRResultSetDataSource(rs);
//                String src = "relatorioSiouv.jasper";
//
//                JasperPrint jaspertPrint = null;
//                try {
//                    jaspertPrint = JasperFillManager.fillReport(src, new HashMap(), teste);
//
//                } catch (JRException ex) {
//                    Logger.getLogger(TelaInicial.class
//                            .getName()).log(Level.SEVERE, null, ex);
//                }
//
//                JasperViewer view = new JasperViewer(jaspertPrint, false);
//
//                view.setVisible(true);
//
//            } else {
//                JOptionPane.showMessageDialog(null, "Não Possui Registro Conforme Busca!", "Erro", JOptionPane.ERROR_MESSAGE);
//            }
//        }

    }

    public void rel_ocor() throws SQLException, IOException {
        if (comboOcorrencia.getSelectedIndex() == 0) {
            String geral = "select tipo_ocorrencia, count(*) from OCORRENCIA_  where tipo_ocorrencia = 'DENÚNCIA' group by tipo_ocorrencia";
            try (
                    PreparedStatement ps1 = con2.prepareStatement(geral)) {
                ps1.execute();
                ResultSet rs1 = ps1.getResultSet();
                if (!rs1.next()) {
                    txt1.setText("0");
                } else {
                    txt1.setText(rs1.getString(2));
                }
                rs1.close();

            } catch (SQLException ex) {
                Logger.getLogger(TelaRelatorios.class
                        .getName()).log(Level.SEVERE, null, ex);
            }
            String geral1 = "select tipo_ocorrencia, count(*) from OCORRENCIA_  where tipo_ocorrencia = 'ELOGIO' group by tipo_ocorrencia";
            try (
                    PreparedStatement ps2 = con2.prepareStatement(geral1)) {
                ps2.execute();
                ResultSet rs2 = ps2.getResultSet();
                if (!rs2.next()) {
                    txt2.setText("0");
                } else {
                    txt2.setText(rs2.getString(2));
                }
                rs2.close();

            } catch (SQLException ex) {
                Logger.getLogger(TelaRelatorios.class
                        .getName()).log(Level.SEVERE, null, ex);
            }
            String geral2 = "select tipo_ocorrencia, count(*) from OCORRENCIA_  where tipo_ocorrencia = 'IMPROCEDENTE' group by tipo_ocorrencia";
            try (
                    PreparedStatement ps3 = con2.prepareStatement(geral2)) {
                ps3.execute();
                ResultSet rs3 = ps3.getResultSet();
                if (!rs3.next()) {
                    txt3.setText("0");
                } else {
                    txt3.setText(rs3.getString(2));
                }
                rs3.close();

            } catch (SQLException ex) {
                Logger.getLogger(TelaRelatorios.class
                        .getName()).log(Level.SEVERE, null, ex);
            }
            String geral3 = "select tipo_ocorrencia, count(*) from OCORRENCIA_  where tipo_ocorrencia = 'RECLAMAÇÃO' group by tipo_ocorrencia";
            try (
                    PreparedStatement ps4 = con2.prepareStatement(geral3)) {
                ps4.execute();
                ResultSet rs4 = ps4.getResultSet();
                if (!rs4.next()) {
                    txt4.setText("0");
                } else {
                    txt4.setText(rs4.getString(2));
                }
                rs4.close();

            } catch (SQLException ex) {
                Logger.getLogger(TelaRelatorios.class
                        .getName()).log(Level.SEVERE, null, ex);
            }
            String geral4 = "select tipo_ocorrencia, count(*) from OCORRENCIA_  where TIPO_OCORRENCIA = 'SUGESTÃO' group by TIPO_OCORRENCIA";
            try (
                    PreparedStatement ps5 = con2.prepareStatement(geral4)) {
                ps5.execute();
                ResultSet rs5 = ps5.getResultSet();
                if (!rs5.next()) {
                    txt5.setText("0");
                } else {
                    txt5.setText(rs5.getString(2));
                }
                rs5.close();

            } catch (SQLException ex) {
                Logger.getLogger(TelaRelatorios.class
                        .getName()).log(Level.SEVERE, null, ex);
            }

            int s1 = Integer.parseInt(txt1.getText());
            int s2 = Integer.parseInt(txt2.getText());
            int s3 = Integer.parseInt(txt3.getText());
            int s4 = Integer.parseInt(txt4.getText());
            int s5 = Integer.parseInt(txt5.getText());

            DefaultCategoryDataset dataset = new DefaultCategoryDataset();
            dataset.setValue(s1, "", "DENÚNCIA");
            dataset.setValue(s2, "", "ELOGIO");
            dataset.setValue(s3, "", "IMPROCEDENTE");
            dataset.setValue(s4, "", "RECLAMAÇÃO");
            dataset.setValue(s5, "", "SUGESTÃO");

            JFreeChart chart = ChartFactory.createBarChart3D("GRÁFICOS DE OCORRÊNCIAS SIOUV", "TIPOS DE OCORRÊNCIAS", "", dataset, PlotOrientation.VERTICAL, false, true, false);

            CategoryPlot catPlot = chart.getCategoryPlot();
            catPlot.setDomainGridlinePaint(Color.white);
            catPlot.setBackgroundPaint(Color.white);
            catPlot.setRangeGridlinePaint(Color.white);
            catPlot.setRangeGridlinePaint(Color.white);
            catPlot.setOutlineVisible(false);

            BufferedImage icon = ImageIO.read(new File("Imagens/logoGrafico.png"));
//            chart.setBackgroundImage(icon);
            CategoryPlot cattPlot = chart.getCategoryPlot();
            cattPlot.setBackgroundImage(icon);

            BarRenderer rend = (BarRenderer) catPlot.getRenderer();
            ItemLabelPosition p = new ItemLabelPosition(ItemLabelAnchor.CENTER, TextAnchor.CENTER);
            rend.setItemMargin(-0.9);
            rend.setSeriesPaint(0, Color.GRAY); // azul aço
            rend.setSeriesPaint(1, Color.WHITE);// cinza Gray
            rend.setSeriesItemLabelsVisible(0, Boolean.TRUE, false);
            rend.setSeriesItemLabelsVisible(1, Boolean.TRUE, false);
            rend.setSeriesItemLabelsVisible(2, Boolean.TRUE, false);
            rend.setBaseItemLabelFont(new Font("SansSerif", Font.BOLD, 12));
            rend.setBaseItemLabelGenerator(new StandardCategoryItemLabelGenerator());
            rend.setBaseItemLabelsVisible(true);
            rend.setBasePositiveItemLabelPosition(p);
            rend.setPositiveItemLabelPositionFallback(p);
            rend.setDrawBarOutline(true);
            
            ChartPanel chartPanel = new ChartPanel(chart);
            painel.removeAll();
            painel.add(chartPanel, BorderLayout.CENTER);
            painel.validate();
        } else if (comboOcorrencia.getSelectedIndex() != 0) {
            String denuncia = "select tipo_ocorrencia, count(*) from SIOUV.OCORRENCIA_  where tipo_ocorrencia = '" + comboOcorrencia.getSelectedItem() + "' group by tipo_ocorrencia";
            PreparedStatement ps4 = con2.prepareStatement(denuncia);
            ps4.execute();
            ResultSet rs4 = ps4.getResultSet();
            if (!rs4.next()) {
                txt1.setText("0");
            } else {
                txt1.setText(rs4.getString(2));
            }
            rs4.close();

            String denuncia2 = "select tipo_ocorrencia, count(*) from SIOUV.OCORRENCIA_  where tipo_ocorrencia = '" + comboOcorrencia.getSelectedItem() + "' AND STATUS = 'EM ANÁLISE' group by tipo_ocorrencia";
            PreparedStatement psr2 = con2.prepareStatement(denuncia2);
            psr2.execute();
            ResultSet rsr2 = psr2.getResultSet();
            if (!rsr2.next()) {
                txt2.setText("0");
            } else {
                txt2.setText(rsr2.getString(2));
            }
            rsr2.close();

            String denuncia3 = "select tipo_ocorrencia, count(*) from SIOUV.OCORRENCIA_  where tipo_ocorrencia = '" + comboOcorrencia.getSelectedItem() + "' AND STATUS = 'ENCERRADO' group by tipo_ocorrencia";
            PreparedStatement psr3 = con2.prepareStatement(denuncia3);
            psr3.execute();
            ResultSet rsr3 = psr3.getResultSet();
            if (!rsr3.next()) {
                txt3.setText("0");
            } else {
                txt3.setText(rsr3.getString(2));
            }
            rsr3.close();

            String denuncia4 = "select tipo_ocorrencia, count(*) from SIOUV.OCORRENCIA_  where tipo_ocorrencia = '" + comboOcorrencia.getSelectedItem() + "' AND STATUS = 'ENCAMINHADO' group by tipo_ocorrencia";
            PreparedStatement psr4 = con2.prepareStatement(denuncia4);
            psr4.execute();
            ResultSet rsr4 = psr4.getResultSet();
            if (!rsr4.next()) {
                txt4.setText("0");
            } else {
                txt4.setText(rsr4.getString(2));
            }
            rsr4.close();

            String denuncia5 = "select tipo_ocorrencia, count(*) from SIOUV.OCORRENCIA_  where tipo_ocorrencia = '" + comboOcorrencia.getSelectedItem() + "' AND STATUS = 'PENDENTE' group by tipo_ocorrencia";
            PreparedStatement psr5 = con2.prepareStatement(denuncia5);
            psr5.execute();
            ResultSet rsr5 = psr5.getResultSet();
            if (!rsr5.next()) {
                txt5.setText("0");
            } else {
                txt5.setText(rsr5.getString(2));
            }
            rsr5.close();

            int s1 = Integer.parseInt(txt1.getText());
            int s2 = Integer.parseInt(txt2.getText());
            int s3 = Integer.parseInt(txt3.getText());
            int s4 = Integer.parseInt(txt4.getText());
            int s5 = Integer.parseInt(txt5.getText());

            DefaultCategoryDataset dataset = new DefaultCategoryDataset();
            dataset.setValue(s1, "TIPO1", (Comparable) comboOcorrencia.getSelectedItem());
            dataset.setValue(s2, "TIPO2", "EM ANÁLISE");
            dataset.setValue(s3, "TIPO2", "ENCERRADO");
            dataset.setValue(s4, "TIPO2", "ENCAMINHADO");
            dataset.setValue(s5, "TIPO2", "PENDENTE");

            JFreeChart chart = ChartFactory.createBarChart3D("GRÁFICOS DE OCORRÊNCIAS SIOUV", "TIPOS DE OCORRÊNCIAS - " + comboOcorrencia.getSelectedItem(), "", dataset, PlotOrientation.VERTICAL, false, false, false);

            CategoryPlot catPlot = chart.getCategoryPlot();
            catPlot.setDomainGridlinePaint(Color.white);
            catPlot.setBackgroundPaint(Color.white);
            catPlot.setRangeGridlinePaint(Color.white);
            catPlot.setRangeGridlinePaint(Color.white);
            catPlot.setOutlineVisible(false);

            BufferedImage icon = ImageIO.read(new File("Imagens/logoGrafico.png"));
//            chart.setBackgroundImage(icon);

            CategoryPlot cattPlot = chart.getCategoryPlot();
            cattPlot.setBackgroundImage(icon);

            BarRenderer rend = (BarRenderer) catPlot.getRenderer();
            ItemLabelPosition p = new ItemLabelPosition(ItemLabelAnchor.CENTER, TextAnchor.CENTER);
            rend.setItemMargin(-0.9);
            rend.setSeriesPaint(0, Color.GRAY); // azul aço
            rend.setSeriesPaint(1, Color.WHITE);// cinza Gray
            rend.setSeriesItemLabelsVisible(0, Boolean.TRUE, false);
            rend.setSeriesItemLabelsVisible(1, Boolean.TRUE, false);
            rend.setSeriesItemLabelsVisible(2, Boolean.TRUE, false);
            rend.setBaseItemLabelFont(new Font("SansSerif", Font.BOLD, 12));
            rend.setBaseItemLabelGenerator(new StandardCategoryItemLabelGenerator());
            rend.setBaseItemLabelsVisible(true);
            rend.setBasePositiveItemLabelPosition(p);
            rend.setPositiveItemLabelPositionFallback(p);
            rend.setDrawBarOutline(true);
            
            ChartPanel chartPanel = new ChartPanel(chart);

            painel.removeAll();
            painel.add(chartPanel, BorderLayout.CENTER);
            painel.validate();
        }
    }

    public void rel_sta() throws SQLException, IOException {
        if (comboStatus.getSelectedIndex() == 0) {
            String analise = "select status, count(*) from OCORRENCIA_  where status = 'EM ANÁLISE' group by status";
            try (
                    PreparedStatement ps1 = con2.prepareStatement(analise)) {
                ps1.execute();
                ResultSet rs1 = ps1.getResultSet();
                if (!rs1.next()) {
                    txt1.setText("0");
                } else {
                    txt1.setText(rs1.getString(2));
                }
                rs1.close();

            } catch (SQLException ex) {
                Logger.getLogger(TelaRelatorios.class
                        .getName()).log(Level.SEVERE, null, ex);
            }
            String encerrado = "select status, count(*) from OCORRENCIA_  where status = 'ENCERRADO' group by status";
            try (
                    PreparedStatement ps2 = con2.prepareStatement(encerrado)) {
                ps2.execute();
                ResultSet rs2 = ps2.getResultSet();
                if (!rs2.next()) {
                    txt2.setText("0");
                } else {
                    txt2.setText(rs2.getString(2));
                }
                rs2.close();

            } catch (SQLException ex) {
                Logger.getLogger(TelaRelatorios.class
                        .getName()).log(Level.SEVERE, null, ex);
            }
            String encaminhado = "select status, count(*) from OCORRENCIA_  where status = 'ENCAMINHADO' group by status";
            try (
                    PreparedStatement ps3 = con2.prepareStatement(encaminhado)) {
                ps3.execute();
                ResultSet rs3 = ps3.getResultSet();
                if (!rs3.next()) {
                    txt3.setText("0");
                } else {
                    txt3.setText(rs3.getString(2));
                }
                rs3.close();

            } catch (SQLException ex) {
                Logger.getLogger(TelaRelatorios.class
                        .getName()).log(Level.SEVERE, null, ex);
            }
            String pendente = "select status, count(*) from OCORRENCIA_  where status = 'PENDENTE' group by status";
            try (
                    PreparedStatement ps4 = con2.prepareStatement(pendente)) {
                ps4.execute();
                ResultSet rs4 = ps4.getResultSet();
                if (!rs4.next()) {
                    txt4.setText("0");
                } else {
                    txt4.setText(rs4.getString(2));
                }
                rs4.close();

            } catch (SQLException ex) {
                Logger.getLogger(TelaRelatorios.class
                        .getName()).log(Level.SEVERE, null, ex);
            }
            int s1 = Integer.parseInt(txt1.getText());
            int s2 = Integer.parseInt(txt2.getText());
            int s3 = Integer.parseInt(txt3.getText());
            int s4 = Integer.parseInt(txt4.getText());

            DefaultCategoryDataset dataset = new DefaultCategoryDataset();
            dataset.setValue(s1, "", "EM ANÁLISE");
            dataset.setValue(s2, "", "ENCERRADO");
            dataset.setValue(s3, "", "ENCAMINHADO");
            dataset.setValue(s4, "", "PENDENTE");

            JFreeChart chart = ChartFactory.createBarChart3D("GRÁFICOS DE OCORRÊNCIAS SIOUV", "STATUS", "", dataset, PlotOrientation.VERTICAL, false, true, false);
            CategoryPlot catPlot = chart.getCategoryPlot();
            catPlot.setDomainGridlinePaint(Color.white);
            catPlot.setBackgroundPaint(Color.white);
            catPlot.setRangeGridlinePaint(Color.white);
            catPlot.setRangeGridlinePaint(Color.white);
            catPlot.setOutlineVisible(false);

            BufferedImage icon = ImageIO.read(new File("Imagens/logoGrafico.png"));
//            chart.setBackgroundImage(icon);
            CategoryPlot cattPlot = chart.getCategoryPlot();
            cattPlot.setBackgroundImage(icon);

            BarRenderer rend = (BarRenderer) catPlot.getRenderer();
            ItemLabelPosition p = new ItemLabelPosition(ItemLabelAnchor.CENTER, TextAnchor.CENTER);
            rend.setItemMargin(-0.9);
            rend.setSeriesPaint(0, Color.GRAY); // azul aço
            rend.setSeriesPaint(1, Color.WHITE);// cinza Gray
            rend.setSeriesItemLabelsVisible(0, Boolean.TRUE, false);
            rend.setSeriesItemLabelsVisible(1, Boolean.TRUE, false);
            rend.setSeriesItemLabelsVisible(2, Boolean.TRUE, false);
            rend.setBaseItemLabelFont(new Font("SansSerif", Font.BOLD, 12));
            rend.setBaseItemLabelGenerator(new StandardCategoryItemLabelGenerator());
            rend.setBaseItemLabelsVisible(true);
            rend.setBasePositiveItemLabelPosition(p);
            rend.setPositiveItemLabelPositionFallback(p);
            rend.setDrawBarOutline(true);
            
            ChartPanel chartPanel = new ChartPanel(chart);
            painel.removeAll();
            painel.add(chartPanel, BorderLayout.CENTER);
            painel.validate();

        } else if (comboStatus.getSelectedIndex() != 0) {
            PS = con2.prepareStatement("SELECT * FROM OCORRENCIA_ WHERE status = '"
                    + comboStatus.getSelectedItem() + "' AND data BETWEEN '" + dataCampo.getText().substring(6, 10) + "-" + dataCampo.getText().substring(3, 5) + "-" + dataCampo.getText().substring(0, 2) + "' AND '"
                    + dataCampo1.getText().substring(6, 10) + "-" + dataCampo1.getText().substring(3, 5) + "-" + dataCampo1.getText().substring(0, 2) + "'  ORDER BY data");
            ResultSet rs = PS.executeQuery();

            if (rs.isBeforeFirst()) {
                JRResultSetDataSource teste = new JRResultSetDataSource(rs);
                String src = "relatorioSiouv.jasper";

                JasperPrint jaspertPrint = null;
                try {
                    jaspertPrint = JasperFillManager.fillReport(src, new HashMap(), teste);

                } catch (JRException ex) {
                    Logger.getLogger(TelaInicial.class
                            .getName()).log(Level.SEVERE, null, ex);
                }

                JasperViewer view = new JasperViewer(jaspertPrint, false);

                view.setVisible(true);
            } else {
                JOptionPane.showMessageDialog(null, "Não Possui Registro Conforme Busca!", "Erro", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    public void rel_data() throws SQLException {
        PS = con2.prepareStatement("SELECT * FROM SIOUV.OCORRENCIA_ WHERE data BETWEEN '" + dataCampo.getText().substring(6, 10) + "-" + dataCampo.getText().substring(3, 5) + "-" + dataCampo.getText().substring(0, 2) + "' AND '"
                + dataCampo1.getText().substring(6, 10) + "-" + dataCampo1.getText().substring(3, 5) + "-" + dataCampo1.getText().substring(0, 2) + "'  ORDER BY data");
        ResultSet rs = PS.executeQuery();

        if (rs.isBeforeFirst()) {
            JRResultSetDataSource teste = new JRResultSetDataSource(rs);
            String src = "relatorioSiouv.jasper";

            JasperPrint jaspertPrint = null;
            try {
                jaspertPrint = JasperFillManager.fillReport(src, new HashMap(), teste);

            } catch (JRException ex) {
                Logger.getLogger(TelaInicial.class
                        .getName()).log(Level.SEVERE, null, ex);
            }

            JasperViewer view = new JasperViewer(jaspertPrint, false);

            view.setVisible(true);
        } else {
            System.out.println("rel_data_err");
            JOptionPane.showMessageDialog(null, "Não Possui Registro Conforme Busca!", "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void relatorio() throws SQLException, IOException {
        if (checkCategoria.isSelected() && checkOcorrencia.isSelected() && checkStatus.isSelected()) {
            rel_cat_ocor_sta();
        } else if (checkCategoria.isSelected() && checkOcorrencia.isSelected()) {
            rel_cat_ocor();

        } else if (checkCategoria.isSelected() && checkStatus.isSelected()) {
            rel_cat_sta();

        } else if (checkOcorrencia.isSelected() && checkStatus.isSelected()) {
            rel_ocor_sta();

        } else if (checkCategoria.isSelected()) {
            rel_cat();

        } else if (checkOcorrencia.isSelected()) {
            rel_ocor();

        } else if (checkStatus.isSelected()) {
            rel_sta();

        } else if (!dataCampo.getText().equals("  /  /    ")) {
            rel_data();
        } else {
            JOptionPane.showMessageDialog(null, "PREENCHA OS CAMPOS DE DATA!", "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TelaRelatorios.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TelaRelatorios.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TelaRelatorios.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TelaRelatorios.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new TelaRelatorios().setVisible(true);

                } catch (SQLException ex) {
                    Logger.getLogger(TelaRelatorios.class
                            .getName()).log(Level.SEVERE, null, ex);

                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(TelaRelatorios.class
                            .getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botaoGerar;
    private javax.swing.JButton botaoVoltar;
    private javax.swing.JCheckBox checkCategoria;
    private javax.swing.JCheckBox checkOcorrencia;
    private javax.swing.JCheckBox checkStatus;
    private javax.swing.JComboBox<String> comboCategoria;
    private javax.swing.JComboBox<String> comboOcorrencia;
    private javax.swing.JComboBox<String> comboStatus;
    private javax.swing.JTextField dataCampo;
    private javax.swing.JTextField dataCampo1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JToggleButton jToggleButton1;
    private javax.swing.JPanel painel;
    private javax.swing.JTextField txt1;
    private javax.swing.JTextField txt2;
    private javax.swing.JTextField txt3;
    private javax.swing.JTextField txt4;
    private javax.swing.JTextField txt5;
    private javax.swing.JTextField txt6;
    // End of variables declaration//GEN-END:variables
}
